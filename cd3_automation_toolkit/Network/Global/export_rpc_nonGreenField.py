#!/usr/bin/python3
# Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
#
# This script will produce a Terraform file that will be used to export OCI core components
# Export Remote Procedure Connections
#
# Author: Ulaganathan N
# Oracle Consulting
#

import argparse
import oci
import os
from commonTools import *
from oci.config import DEFAULT_LOCATION

importCommands = {}
oci_obj_names = {}
rpc_safe_file = {}


def get_rpc_resources(source_region, SOURCE_RPC_LIST, DEST_RPC_LIST, rpc_source_client, ct, values_for_column,
                      ntk_compartment_name):
    # Variables
    dest_rpc_id = ""
    dest_attach_id = ""
    dest_rpc_drg_name = ""
    src_drg_rt_name = ""
    dest_drg_rt_name = ""
    rpc_description = ""
    dest_region = ""

    # Fetch source and dest region name from dict
    source_region = source_region

    def get_comp_details(comp_data):
        for c_name, c_id in ct.ntk_compartment_ids.items():
            if c_id == comp_data:
                return c_name

    # creating rpc.safe file
    rpc_file = f'{outdir}/global/rpc/' + "rpc.safe"
    rpc_safe_file[source_region] = open(rpc_file, "a")

    # Fetch Source Data
    for new_rpc in SOURCE_RPC_LIST.data:
        source_rpc_id = new_rpc.id
        source_rpc_peer_id = new_rpc.peer_id
        # Check peering is alive
        if source_rpc_peer_id is not None:
            source_rpc_details = rpc_source_client.get_remote_peering_connection(
                remote_peering_connection_id=new_rpc.id)
            source_rpc_comp_name = get_comp_details(new_rpc.compartment_id)
            source_rpc_display_name = new_rpc.display_name
            source_rpc_drg_id = new_rpc.drg_id

            source_rpc_network_type = new_rpc.display_name
            source_rpc_drg_name = getattr(rpc_source_client.get_drg(drg_id=source_rpc_drg_id).data, 'display_name')
            rpc_tf_name = commonTools.check_tf_variable(new_rpc.display_name)

            # Fetch source attach list id
            drg_rpc_attachment_list = rpc_source_client.list_drg_attachments(compartment_id=ct.ntk_compartment_ids[
                ntk_compartment_name], attachment_type="REMOTE_PEERING_CONNECTION", drg_id=new_rpc.drg_id)

            # Fetch DRG RT name
            for item in drg_rpc_attachment_list.data:
                source_drg_route_table_id = ""
                if source_rpc_id == item.network_details.id:
                    print("source_rpc_display_name ", source_rpc_display_name)
                    print("item.display_name ", item.display_name)
                    source_drg_route_table_id = item.drg_route_table_id
                    src_drg_rt_name = getattr(
                        rpc_source_client.get_drg_route_table(drg_route_table_id=source_drg_route_table_id).data,
                        'display_name')
                    print("src_drg_rt_name", src_drg_rt_name)

            # Check for duplicate rpc entry in safe file first
            fo = open(f'{rpc_file}').read()

            # If existing RPC not present in safe file
            if source_rpc_id not in fo and source_rpc_peer_id not in fo:
                for region, client in DEST_RPC_LIST.items():
                    dest_region = region
                    rpc_safe_file[source_region].write(
                        f"{source_region},{region},{source_rpc_display_name},{source_rpc_peer_id} \n")

                    # Fetch destination region data
                    new_client = oci.pagination.list_call_get_all_results(client.list_remote_peering_connections,
                                                                          compartment_id=ct.ntk_compartment_ids[
                                                                              ntk_compartment_name])
                    for dest_rpc in new_client.data:
                        dest_attach_id = ""
                        if source_rpc_peer_id is not None:
                            dest_rpc_details = client.get_remote_peering_connection(
                                remote_peering_connection_id=source_rpc_peer_id)
                            dest_rpc_id = dest_rpc.id
                            dest_rpc_drg_id = dest_rpc.drg_id
                            dest_drg_route_tables = client.list_drg_route_tables(drg_id=dest_rpc_drg_id)

                            for item in dest_drg_route_tables.data:
                                if getattr(item,
                                           'display_name') == "Autogenerated Drg Route Table for RPC, VC, and IPSec attachments":
                                    dest_rpc_drg_rt_id = getattr(item, 'id')

                            dest_rpc_drg_name = getattr(client.get_drg(drg_id=dest_rpc_drg_id).data, 'display_name')
                            dest_drg_rpc_attachment_list = client.list_drg_attachments(
                                compartment_id=ct.ntk_compartment_ids[
                                    ntk_compartment_name], attachment_type="REMOTE_PEERING_CONNECTION",
                                drg_id=dest_rpc_drg_id)

                            for attachment in dest_drg_rpc_attachment_list.data:
                                if dest_rpc_id == attachment.network_details.id:
                                    dest_attach_id = attachment.id

                            # Fetch Dest DRG RT name
                            for item in dest_drg_rpc_attachment_list.data:
                                dest_drg_route_table_id = ""
                                if dest_rpc_id == item.network_details.id:
                                    dest_drg_route_table_id = item.drg_route_table_id
                                    dest_drg_rt_name = getattr(
                                        client.get_drg_route_table(drg_route_table_id=dest_drg_route_table_id).data,
                                        'display_name')

                importCommands[source_region.lower()].write(
                        "\nterraform import \"module.rpcs[\\\"" + rpc_tf_name + f"\\\"].oci_core_remote_peering_connection.{source_region}_{region}_requester_rpc[\\\"region\\\"]\" " + str(
                            source_rpc_id))
                importCommands[source_region.lower()].write(
                        "\nterraform import \"module.rpcs[\\\"" + rpc_tf_name + f"\\\"].oci_core_remote_peering_connection.{source_region}_{region}_accepter_rpc[\\\"region\\\"]\" " + str(
                            dest_rpc_id))

                for col_header in values_for_column:
                        if col_header == 'Region':
                            values_for_column[col_header].append(source_region)
                        elif col_header == 'Attached To' and source_rpc_peer_id is not None:
                            # Format is RPC::region::dest_rpc_comp_name::dest_rpc_drg_name
                            attach_to = "RPC::" + region + "::" + dest_rpc_drg_name
                            values_for_column[col_header].append(attach_to)
                        elif col_header == 'Compartment Name':
                            values_for_column[col_header].append(source_rpc_comp_name)
                        elif col_header == 'Rpc Display Name':
                            values_for_column[col_header].append(source_rpc_display_name)
                        elif col_header == 'Rpc Description':
                            values_for_column[col_header].append(rpc_description)
                        elif col_header == 'DRG Name':
                            values_for_column[col_header].append(source_rpc_drg_name)
                        elif col_header == 'DRG RT Name':
                            values_for_column[col_header].append(src_drg_rt_name)
                        elif col_header == 'Accepter DRG RT Name' and source_rpc_peer_id is not None:
                            values_for_column[col_header].append(dest_drg_rt_name)

                        elif col_header.lower() in commonTools.tagColumns:
                            values_for_column = commonTools.export_tags(new_rpc, col_header, values_for_column)
                        else:
                            oci_objs = [new_rpc]
                            values_for_column = commonTools.export_extra_columns(oci_objs, col_header, sheet_dict,
                                                                                 values_for_column)
                    # print(values_for_column)
            else:
                print(f"{source_rpc_id} already exists in other region state files.so ignoring....")
        else:
            continue

    # Close the safe_file post updates
    rpc_safe_file[source_region].close()


def parse_args():
    # Read the arguments
    parser = argparse.ArgumentParser(description="Export Service Connectors  on OCI to CD3")
    parser.add_argument("inputfile", help="path of CD3 excel file to export Service Connectors objects to")
    parser.add_argument("outdir", help="path to out directory containing script for TF import commands")
    parser.add_argument('service_dir', help='Structured out directory for creation of TF files')
    parser.add_argument("--config", default=DEFAULT_LOCATION, help="Config file name")
    parser.add_argument("--export-regions", nargs='*',
                        help="comma separated Regions for which to export Networking Objects",
                        required=False)
    parser.add_argument("--export-compartments", nargs='*', required=False,
                        help="comma separated Compartments for which to export RPC source and dest")

    return parser.parse_args()


def export_rpc_resource(inputfile, export_compartments, _outdir, service_dir, _config, export_regions, ct):
    global tf_import_cmd
    global sheet_dict
    global importCommands
    global config
    global cd3file
    global reg
    global outdir
    global valuesforcolumn

    cd3file = inputfile
    if ('.xls' not in cd3file):
        print("\nAcceptable cd3 format: .xlsx")
        exit()

    outdir = _outdir
    configFileName = _config
    config = oci.config.from_file(file_location=configFileName)

    sheetName = "DRGs"
    if ct is None:
        ct = commonTools()
        subs_region_list = ct.get_subscribedregions(configFileName)
        ct.get_network_compartment_ids(config['tenancy'], "root", configFileName)

    # Read CD3
    df, values_for_column = commonTools.read_cd3(cd3file, sheetName)

    # Get dict for columns from Excel_Columns
    sheet_dict = ct.sheet_dict[sheetName]

    print("\nCD3 excel file should not be opened during export process!!!")
    print("Tab- DRGs  will be overwritten during export process!!!\n")

    # Create backups
    resource = 'tf_import_' + sheetName.lower()
    file_name = 'tf_import_commands_' + "rpcs" + '_nonGF.sh'

    for region in export_regions:
        # script_file = f'{outdir}/{region}/{service_dir}/' + file_name
        script_file = f'{outdir}/global/rpc/{region}-{file_name}'
        os.makedirs(os.path.dirname(script_file), exist_ok=True)
        if os.path.exists(script_file):
            commonTools.backup_file(outdir + "/" + "global/rpc" + "/" + service_dir, resource, file_name)
        importCommands[region] = open(script_file, "w+")
        importCommands[region].write("#!/bin/bash")
        importCommands[region].write("\n")
        importCommands[region].write("terraform init")

        # Fetch RPC Details
        DEST_RPC_LIST = {}
        importCommands[region].write("\n\n######### Writing import for RPC #########\n\n")
        config.__setitem__("region", ct.region_dict[region])
        rpc_source_client = oci.core.VirtualNetworkClient(config, retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY)

        # Get subscribed region list from ct.
        subs_region_list = ct.get_subscribedregions(configFileName)

        if region in subs_region_list:
            subs_region_list.remove(region)
            for reg in subs_region_list:
                config.__setitem__("region", ct.region_dict[reg])
                DEST_RPC_LIST[reg] = oci.core.VirtualNetworkClient(config,
                                                                   retry_strategy=oci.retry.DEFAULT_RETRY_STRATEGY)
                for ntk_compartment_name in export_compartments:
                    SOURCE_RPC_LIST = oci.pagination.list_call_get_all_results(
                        rpc_source_client.list_remote_peering_connections,
                        compartment_id=ct.ntk_compartment_ids[
                            ntk_compartment_name])

                    get_rpc_resources(region, SOURCE_RPC_LIST, DEST_RPC_LIST, rpc_source_client,
                                      ct, values_for_column, ntk_compartment_name)

    commonTools.write_to_cd3(values_for_column, cd3file, sheetName)
    print("RPC resources exported to CD3\n")

    # writing data
    for source_region in export_regions:
        script_file = f'{outdir}/global/rpc/{source_region}-{file_name}'
        with open(script_file, 'a') as importCommands[source_region]:
            importCommands[source_region].write('\n\nterraform plan\n')


if __name__ == '__main__':
    args = parse_args()
    # Execution of the code begins here
    export_rpc_resource(args.inputfile, args.export_compartments, args.outdir, args.service_dir, args.export_regions,
                        ct)
